Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL

Grammar

Rule 0     S' -> expression
Rule 1     expression -> CONST
Rule 2     expression -> DIFF LPAREN expression COMMA expression RPAREN
Rule 3     expression -> ZERO LPAREN expression RPAREN
Rule 4     expression -> IF expression THEN expression ELSE expression
Rule 5     expression -> VAR
Rule 6     expression -> LET VAR EQUAL expression IN expression
Rule 7     expression -> PROC LPAREN VAR RPAREN expression
Rule 8     expression -> LPAREN expression expression RPAREN
Rule 9     expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression

Terminals, with rules where they appear

CALL                 : 
COMMA                : 2
CONST                : 1
DIFF                 : 2
ELSE                 : 4
EQUAL                : 6
IF                   : 4
IN                   : 6 9
LET                  : 6
LETREC               : 9
LPAREN               : 2 3 7 8 9
PROC                 : 7
RPAREN               : 2 3 7 8 9
THEN                 : 4
VAR                  : 5 6 7 9 9
ZERO                 : 3
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 4 4 4 6 6 7 8 8 9 9 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> CONST .

    $end            reduce using rule 1 (expression -> CONST .)
    CONST           reduce using rule 1 (expression -> CONST .)
    DIFF            reduce using rule 1 (expression -> CONST .)
    ZERO            reduce using rule 1 (expression -> CONST .)
    IF              reduce using rule 1 (expression -> CONST .)
    VAR             reduce using rule 1 (expression -> CONST .)
    LET             reduce using rule 1 (expression -> CONST .)
    PROC            reduce using rule 1 (expression -> CONST .)
    LPAREN          reduce using rule 1 (expression -> CONST .)
    LETREC          reduce using rule 1 (expression -> CONST .)
    THEN            reduce using rule 1 (expression -> CONST .)
    COMMA           reduce using rule 1 (expression -> CONST .)
    RPAREN          reduce using rule 1 (expression -> CONST .)
    ELSE            reduce using rule 1 (expression -> CONST .)
    IN              reduce using rule 1 (expression -> CONST .)


state 3

    (2) expression -> DIFF . LPAREN expression COMMA expression RPAREN

    LPAREN          shift and go to state 11


state 4

    (8) expression -> LPAREN . expression expression RPAREN
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 12

state 5

    (3) expression -> ZERO . LPAREN expression RPAREN

    LPAREN          shift and go to state 13


state 6

    (4) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 14

state 7

    (5) expression -> VAR .

    $end            reduce using rule 5 (expression -> VAR .)
    CONST           reduce using rule 5 (expression -> VAR .)
    DIFF            reduce using rule 5 (expression -> VAR .)
    ZERO            reduce using rule 5 (expression -> VAR .)
    IF              reduce using rule 5 (expression -> VAR .)
    VAR             reduce using rule 5 (expression -> VAR .)
    LET             reduce using rule 5 (expression -> VAR .)
    PROC            reduce using rule 5 (expression -> VAR .)
    LPAREN          reduce using rule 5 (expression -> VAR .)
    LETREC          reduce using rule 5 (expression -> VAR .)
    THEN            reduce using rule 5 (expression -> VAR .)
    COMMA           reduce using rule 5 (expression -> VAR .)
    RPAREN          reduce using rule 5 (expression -> VAR .)
    ELSE            reduce using rule 5 (expression -> VAR .)
    IN              reduce using rule 5 (expression -> VAR .)


state 8

    (6) expression -> LET . VAR EQUAL expression IN expression

    VAR             shift and go to state 15


state 9

    (7) expression -> PROC . LPAREN VAR RPAREN expression

    LPAREN          shift and go to state 16


state 10

    (9) expression -> LETREC . VAR LPAREN VAR RPAREN expression IN expression

    VAR             shift and go to state 17


state 11

    (2) expression -> DIFF LPAREN . expression COMMA expression RPAREN
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 18

state 12

    (8) expression -> LPAREN expression . expression RPAREN
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 19

state 13

    (3) expression -> ZERO LPAREN . expression RPAREN
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 20

state 14

    (4) expression -> IF expression . THEN expression ELSE expression

    THEN            shift and go to state 21


state 15

    (6) expression -> LET VAR . EQUAL expression IN expression

    EQUAL           shift and go to state 22


state 16

    (7) expression -> PROC LPAREN . VAR RPAREN expression

    VAR             shift and go to state 23


state 17

    (9) expression -> LETREC VAR . LPAREN VAR RPAREN expression IN expression

    LPAREN          shift and go to state 24


state 18

    (2) expression -> DIFF LPAREN expression . COMMA expression RPAREN

    COMMA           shift and go to state 25


state 19

    (8) expression -> LPAREN expression expression . RPAREN

    RPAREN          shift and go to state 26


state 20

    (3) expression -> ZERO LPAREN expression . RPAREN

    RPAREN          shift and go to state 27


state 21

    (4) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 28

state 22

    (6) expression -> LET VAR EQUAL . expression IN expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 29

state 23

    (7) expression -> PROC LPAREN VAR . RPAREN expression

    RPAREN          shift and go to state 30


state 24

    (9) expression -> LETREC VAR LPAREN . VAR RPAREN expression IN expression

    VAR             shift and go to state 31


state 25

    (2) expression -> DIFF LPAREN expression COMMA . expression RPAREN
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 32

state 26

    (8) expression -> LPAREN expression expression RPAREN .

    $end            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    CONST           reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    DIFF            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    ZERO            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    IF              reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    VAR             reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    LET             reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    PROC            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    LPAREN          reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    LETREC          reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    THEN            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    COMMA           reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    ELSE            reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)
    IN              reduce using rule 8 (expression -> LPAREN expression expression RPAREN .)


state 27

    (3) expression -> ZERO LPAREN expression RPAREN .

    $end            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    CONST           reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    DIFF            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    ZERO            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    IF              reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    VAR             reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    LET             reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    PROC            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    LPAREN          reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    LETREC          reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    THEN            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    COMMA           reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    ELSE            reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)
    IN              reduce using rule 3 (expression -> ZERO LPAREN expression RPAREN .)


state 28

    (4) expression -> IF expression THEN expression . ELSE expression

    ELSE            shift and go to state 33


state 29

    (6) expression -> LET VAR EQUAL expression . IN expression

    IN              shift and go to state 34


state 30

    (7) expression -> PROC LPAREN VAR RPAREN . expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 35

state 31

    (9) expression -> LETREC VAR LPAREN VAR . RPAREN expression IN expression

    RPAREN          shift and go to state 36


state 32

    (2) expression -> DIFF LPAREN expression COMMA expression . RPAREN

    RPAREN          shift and go to state 37


state 33

    (4) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 38

state 34

    (6) expression -> LET VAR EQUAL expression IN . expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 39

state 35

    (7) expression -> PROC LPAREN VAR RPAREN expression .

    $end            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    CONST           reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    DIFF            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    ZERO            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    IF              reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    VAR             reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    LET             reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    PROC            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    LPAREN          reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    LETREC          reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    THEN            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    COMMA           reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    RPAREN          reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    ELSE            reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)
    IN              reduce using rule 7 (expression -> PROC LPAREN VAR RPAREN expression .)


state 36

    (9) expression -> LETREC VAR LPAREN VAR RPAREN . expression IN expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 40

state 37

    (2) expression -> DIFF LPAREN expression COMMA expression RPAREN .

    $end            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    CONST           reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    DIFF            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    ZERO            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    IF              reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    VAR             reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    LET             reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    PROC            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    LPAREN          reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    LETREC          reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    THEN            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    COMMA           reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    RPAREN          reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    ELSE            reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)
    IN              reduce using rule 2 (expression -> DIFF LPAREN expression COMMA expression RPAREN .)


state 38

    (4) expression -> IF expression THEN expression ELSE expression .

    $end            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    CONST           reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    DIFF            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ZERO            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    IF              reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    VAR             reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    LET             reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    PROC            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    LPAREN          reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    LETREC          reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    COMMA           reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    RPAREN          reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)


state 39

    (6) expression -> LET VAR EQUAL expression IN expression .

    $end            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    CONST           reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    DIFF            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    ZERO            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    IF              reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    VAR             reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    LET             reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    PROC            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    LPAREN          reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    LETREC          reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    THEN            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    COMMA           reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    RPAREN          reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    ELSE            reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)
    IN              reduce using rule 6 (expression -> LET VAR EQUAL expression IN expression .)


state 40

    (9) expression -> LETREC VAR LPAREN VAR RPAREN expression . IN expression

    IN              shift and go to state 41


state 41

    (9) expression -> LETREC VAR LPAREN VAR RPAREN expression IN . expression
    (1) expression -> . CONST
    (2) expression -> . DIFF LPAREN expression COMMA expression RPAREN
    (3) expression -> . ZERO LPAREN expression RPAREN
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . VAR
    (6) expression -> . LET VAR EQUAL expression IN expression
    (7) expression -> . PROC LPAREN VAR RPAREN expression
    (8) expression -> . LPAREN expression expression RPAREN
    (9) expression -> . LETREC VAR LPAREN VAR RPAREN expression IN expression

    CONST           shift and go to state 2
    DIFF            shift and go to state 3
    ZERO            shift and go to state 5
    IF              shift and go to state 6
    VAR             shift and go to state 7
    LET             shift and go to state 8
    PROC            shift and go to state 9
    LPAREN          shift and go to state 4
    LETREC          shift and go to state 10

    expression                     shift and go to state 42

state 42

    (9) expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .

    $end            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    CONST           reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    DIFF            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    ZERO            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    IF              reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    VAR             reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    LET             reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    PROC            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    LPAREN          reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    LETREC          reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    THEN            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    COMMA           reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    RPAREN          reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    ELSE            reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)
    IN              reduce using rule 9 (expression -> LETREC VAR LPAREN VAR RPAREN expression IN expression .)

